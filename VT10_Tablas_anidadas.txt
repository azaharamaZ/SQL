SET SERVEROUTPUT ON;

DROP TYPE colec_hijos;
drop table empleado_array;

-- Coleccion de hijos con ARRAY de 10 hijos
CREATE OR REPLACE TYPE colec_hijos AS
    VARRAY(5) OF VARCHAR2(100);
/

-- Creamos tabla empleado_array con el array
CREATE TABLE empleado_array (
    id_emp      NUMBER PRIMARY KEY,
    nombre     VARCHAR2(50),
    apellidos   VARCHAR2(50),
    hijos      colec_hijos
);

-- Insertamos 4 registros en la tabla empleado_array
INSERT INTO empleado_array VALUES (
    1,
    'Fran',
    'Perez Pons',
    colec_hijos('Luis Perez Pons', 'Ursula Perez Pons')
);

INSERT INTO empleado_array VALUES (
    2,
    'Esperanza',
    'Mora Castell',
    colec_hijos('Jose Mora Castell', 'Carlos Mora Castell', 'Pedro Mora Castell')
);

INSERT INTO empleado_array VALUES (
    3,
    'Toni',
    'Lopez Tosar',
    colec_hijos()
);

INSERT INTO empleado_array VALUES (
    4,
    'Maria Flores Janeiro',
    'Fiol',
    colec_hijos('Joan Flores Janeiro')
);

-- Seleccion generica de la tabla
SELECT
    *
FROM
    empleado_array;

/

-- Como podemos saber el nombre de los hijos de un empleado_array
-- Usar cursores para recorrer la tabla
DECLARE
-- Cursor con la tabla de empleado_arrays
    CURSOR cempleado_array IS
    SELECT
        *
    FROM
        empleado_array;

    registro   cempleado_array%rowtype;
    hijo          VARCHAR2(30);
    nhijos      INTEGER;
BEGIN
    OPEN cempleado_array;
    FETCH cempleado_array INTO registro;
    WHILE cempleado_array%found LOOP
-- Calcular el numero de hijos
        nhijos := registro.hijos.count;
        dbms_output.put_line('- Empleado: '
                             || registro.nombre
                             || ' '
                             || registro.apellidos
                             || chr(13)
                             || '-- Total de Hijos: '
                             || nhijos);

        IF ( nhijos > 0 ) THEN
            dbms_output.put_line('--- Los nombres de los hijos son: ');
            FOR i IN 1..nhijos LOOP
                hijo := registro.hijos(i);
                dbms_output.put_line('--- Hij@ '
                                     || i
                                     || ') '
                                     || hijo);
            END LOOP;

        END IF;

        FETCH cempleado_array INTO registro;
        dbms_output.put_line(chr(13));
    END LOOP;

    CLOSE cempleado_array;
END;
/

DROP TYPE detalle_hijo;
DROP TYPE tabla_hijos;
DROP TABLE empleado_anid;
-- Tablas anidadas no tiene fin
CREATE OR REPLACE TYPE detalle_hijo AS OBJECT (
    nombre  VARCHAR2(100),
    edad    NUMBER(3)
);
/
-- Creamos un Tipo tabla
CREATE OR REPLACE TYPE tabla_hijos AS
    TABLE OF detalle_hijo;
    
/
CREATE TABLE empleado_anid (
    id_emp        NUMBER PRIMARY KEY,
    nombre     VARCHAR2(50),
    apellidos   VARCHAR2(50),
    hijos      tabla_hijos)
    NESTED TABLE hijos STORE AS t_hijos;     -- "STORE AS" en la creación de una columna de tipo "NESTED TABLE" permite personalizar la forma en que se almacenan los datos de la tabla anidada 
    
--Para especificar la tabla se utiliza la cl�usula NESTED TABLE...STORE AS....
/
INSERT INTO empleado_anid VALUES (
    1,
    'Fran',
    'Perez Pons',
    tabla_hijos(detalle_hijo('Luis Perez Pons',2), detalle_hijo('Ursula Perez Pons', 10))
);

INSERT INTO empleado_anid VALUES (
    2,
    'Esperanza',
    'Mora Castell',
    tabla_hijos(detalle_hijo('Jose Mora Castell', 5), detalle_hijo('Carlos Mora Castell', 8), detalle_hijo('Pedro Mora Castell', 11) )
);

INSERT INTO empleado_anid VALUES (
    3,
    'Toni ',
    'Lopez Lopez Tosar',
    tabla_hijos()
);

INSERT INTO empleado_anid VALUES (
    4,
    'Maria ',
    'Flores Janeiro',
    tabla_hijos(detalle_hijo('Joan Flores Janeiro', 1))
);    

SELECT
    t.nombre,
    t2.*
FROM
    empleado_anid        t,
    TABLE ( t.hijos ) t2;

UPDATE TABLE (
    SELECT
        hijos
    FROM
        empleado_anid
    WHERE
        id_emp = 1
)
SET
    edad = edad + 1;

/
   
SELECT
    t.nombre,
    t2.*
FROM
    empleado_anid        t,
    TABLE ( t.hijos ) t2
    WHERE t.id_emp = 1; 
    
DECLARE
  v_id_emp   empleado_anid.id_emp%TYPE;
  v_nombre   empleado_anid.nombre%TYPE;
  v_apellidos  empleado_anid.apellidos%TYPE;
  v_hijo_nombre  varchar(100);
  v_hijo_edad  NUmber;
BEGIN
  FOR r IN (SELECT id_emp, nombre, apellidos, hijos FROM empleado_anid) LOOP
    v_id_emp := r.id_emp;
    v_nombre := r.nombre;
    v_apellidos := r.apellidos;
    FOR h IN (SELECT * FROM TABLE(r.hijos)) LOOP
      v_hijo_nombre := h.nombre;
      v_hijo_edad := h.edad;
      DBMS_OUTPUT.PUT_LINE(v_nombre || ' ' || v_apellidos || ' tiene un hijo llamado ' || v_hijo_nombre || ' que tiene ' || v_hijo_edad || ' años.');
    END LOOP;
  END LOOP;
END;   
    /
 --   OTRO EJEMPLO
 --Se crea el tipo para los detalles:

DROP TYPE detalle_tip FORCE;

CREATE OR REPLACE TYPE detalle_tip AS OBJECT (
    id_producto   NUMBER(3),
    cantidad      NUMBER(10)
);
/
--Se crea el tipo de la tabla anidada basada en el tipo detalle_tip:

CREATE OR REPLACE TYPE nest_detalle AS
    TABLE OF detalle_tip;
/

--Se crea la tabla tipada: 
DROP TABLE orden;

CREATE TABLE orden (
    id_orden   NUMBER PRIMARY KEY,
    fecha      DATE,
    detalles   nest_detalle
)
NESTED TABLE detalles STORE AS store_detalles ( (PRIMARY KEY (nested_table_id,id_producto )));
-- Nested controla que no haya productos repetidos en cada orden

--Inserción de datos 
    INSERT INTO orden VALUES (
        100,
        sysdate,
        nest_detalle(detalle_tip(10, 1500), detalle_tip(11, 900), detalle_tip(17, 200))
    );
/

INSERT INTO orden VALUES (
    200,
    sysdate - 1,
    nest_detalle(detalle_tip(5, 150), detalle_tip(10, 2000))
);

SELECT
    *
FROM
    orden;

SELECT
    id_orden,
    t2.*
FROM
    orden               t,
    TABLE ( t.detalles ) t2;

SELECT
    id_orden,
    t2.id_producto,
    t2.nested_table_id
FROM
    orden               t,
    TABLE ( t.detalles ) t2;


-- Actualizar la cantidad
UPDATE TABLE (
    SELECT
        detalles
    FROM
        orden
    WHERE
        id_orden = 100
)
SET
    cantidad = cantidad + 800
WHERE
    id_producto = 10;    
    
    
    /
    
DECLARE
  CURSOR c_ordenes IS SELECT * FROM orden;
  r_orden c_ordenes%ROWTYPE;
BEGIN
  FOR r_orden IN c_ordenes LOOP
    DBMS_OUTPUT.PUT_LINE('ID de Orden: ' || r_orden.id_orden || ', Fecha: ' || r_orden.fecha);
    FOR i IN 1..r_orden.detalles.COUNT LOOP
      DBMS_OUTPUT.PUT_LINE('   Producto: ' || r_orden.detalles(i).id_producto || ', Cantidad: ' || r_orden.detalles(i).cantidad);
    END LOOP;
  END LOOP;
END;
